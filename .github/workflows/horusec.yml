name: SAST (Horusec)
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  horusec:
    runs-on: ubuntu-latest
    env:
      # ----- SET YOUR LIMITS HERE -----
      MAX_CRITICAL: 0
      MAX_HIGH: 0
      MAX_MEDIUM: 0
      MAX_LOW: 0
    steps:
      - uses: actions/checkout@v4

      # 1) Run Horusec and ALWAYS produce JSON (do not fail here)
      - name: Run Horusec
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$PWD:/src" \
            horuszup/horusec-cli:v2.9.0-beta.3 \
              horusec start \
                -p /src \
                -P "$(pwd)" \
                -o=json -O=/src/horusec-report.json || true

      # 2) Upload the report even if thresholds fail later
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: horusec-report
          path: horusec-report.json
          if-no-files-found: warn

      # 3) Enforce numeric thresholds
      - name: Enforce thresholds
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          FILE="horusec-report.json"
          if [ ! -s "$FILE" ]; then
            echo "horusec-report.json not found or empty; failing for safety."
            exit 1
          fi

          count() { jq "[.analysisVulnerabilities[] | select(.vulnerability.severity==\"$1\")] | length" "$FILE"; }

          CRIT=$(count CRITICAL)
          HIGH=$(count HIGH)
          MED=$(count MEDIUM)
          LOW=$(count LOW)

          echo "Found  -> CRITICAL=$CRIT HIGH=$HIGH MEDIUM=$MED LOW=$LOW"
          echo "Allowed-> CRITICAL=$MAX_CRITICAL HIGH=$MAX_HIGH MEDIUM=$MAX_MEDIUM LOW=$MAX_LOW"

          fail=0
          [ "$CRIT" -le "$MAX_CRITICAL" ] || { echo "::error ::CRITICAL over limit"; fail=1; }
          [ "$HIGH" -le "$MAX_HIGH" ]     || { echo "::error ::HIGH over limit";     fail=1; }
          [ "$MED"  -le "$MAX_MEDIUM" ]   || { echo "::error ::MEDIUM over limit";   fail=1; }
          [ "$LOW"  -le "$MAX_LOW" ]      || { echo "::warning ::LOW over limit";    fail=1; }
          exit $fail
